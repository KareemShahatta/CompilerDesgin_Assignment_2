
options {
  JAVA_UNICODE_ESCAPE = true;
  DEBUG_PARSER = false;
  STATIC = false;
}

PARSER_BEGIN(RamParser)
    package compilers;
    import java.io.FileNotFoundException;

    public class RamParser {
        public static void main(String[] args) 
        throws ParseException, TokenMgrError, FileNotFoundException
        {
            if (args.length == 0) {
                RamParser parser = new RamParser( System.in ) ;
                parser.Goal();
            } else {
                java.io.InputStream is = new java.io.FileInputStream(new java.io.File(args[0]));
                RamParser parser = new RamParser( is ) ;
                parser.Goal();
            }       
        }
    }
PARSER_END(RamParser)


// Insert a specification of a lexical analysis here. 

/* The regular expressions here will be skipped during lexical analysis. No
tokens are constructed from the productions that are defined here. */
SKIP : {
   " "
  | "\r\n"
  | "\r"
  | "\n"
  | "\t"
}


/* Insert the regular expressions for comments here. Special tokens do not
interact in the parsing process, but can be accessed from the parser. */
SPECIAL_TOKEN:
{
    //Accepts single style line comment with white spaces, numbers, uppercase letters , and lowercase letters
   <SINGLELINE_COMMENT: "//" (" " | ["a"-"z"] | ["A"-"Z"] | ["0"-"9"])*>

   //Accepts multiple style line comments with white spaces, numbers, uppercase letters , lowercase letters, and astriks
   | <MULTILINE_COMMENT: "/*" (" " | "*" | ["a"-"z"] | ["A"-"Z"] | ["0"-"9"])* "*/">

   //Operators?
   | <DOT: ".">
   | <COMMA: ",">
   | <SEMICOLON: ";">
}


/* For the regular expressions on the right, the token on the left 
will be returned */
TOKEN : {

      < IF: "if" >
    | < ELSE: "else" >
    | < LPAREN: "(" >
    | < RPAREN: ")" >
    | < LCUR: "{" >
    | < RCUR: "}" >
    | < LBRA: "[" >
    | < RBRA: "]" >
    | < CLASS: "class" >
    | < PUBLIC: "public" >
    | < PRIVATE: "private" >
    | < STATIC: "static" >
    | < VOID: "void" >
    | < MAIN: "main" >
    | <THIS : "this">
    | <RETURN : "return">
    | <BOOLEAN : "bool">
    | <FALSE : "false">
    | <TRUE : "true">
    | <AND : "and">
    | <OR : "or">
    | <NOT : "!">
    | <EQUAL: "=">
    | <EQUALITY : "==">
    | <GREATER_THAN_OR_EQUAL : "ge">
    | <LESS_THAN_OR_EQUAL : "le">
    | <GREATER_THAN : ">">
    | <LESS_THAN : "<">
    | <MULTIPLY : "*">
    | <SUBTRACTION : "-">
    | <ADDITION_ASSIGN : "+=">
    | <SUBTRACTION_ASSIGN : "-=">
    | <INT : "integer">
    | <DIGIT: ("-")?(["0"-"9"])+>
    | <ID: (["A"-"Z"]|["a"-"z"])("_" | ["A"-"Z"]|["a"-"z"]|["0"-"9"])* >
    | <PRINT : "print(" (<DIGIT> | <ID>) ")">
    | <PRINT_LINE : "println(" (<DIGIT> | <ID>) ")">







//    | <FOR : "for">
}



// The following is a simple grammar that will allow you
// to test the generated lexer. 
void Goal() :
{}
{
  
/*
  ( RamToken() )* <EOF>
*/

  ( RamToken() {System.out.println("<" + token.kind + " , " + token.image + ">");} )* 

/*
  ( RamToken() {System.out.println("Kind: " + token.kind + " line " 
  + token.beginLine + ", column " + token.beginColumn + " - line " + 
  token.endLine + ", column " + token.endColumn + " : " + token.image);} )* 
  <EOF>
*/

/*
  ( RamToken() {System.out.println("Kind: " + token.kind + " line " 
  + token.beginLine + ", column " + token.beginColumn + " - line " + 
  token.endLine + ", column " + token.endColumn + " : " + token.image + 
  " " + token.specialToken);} )* 
  <EOF>
*/
}

void RamToken():
{}
{
  <IF> | <ELSE> | <LPAREN> | <RPAREN> | <LCUR> | <RCUR> | <LBRA> | <RBRA>
  | <CLASS> | <PUBLIC> | <PRIVATE> | <STATIC> | <VOID> | <MAIN> |  <THIS> | <RETURN>
  | <BOOLEAN> | <FALSE> | <TRUE> | <AND> | <OR> | <NOT>
  | <EQUAL> | <EQUALITY> | <GREATER_THAN_OR_EQUAL> | <LESS_THAN_OR_EQUAL> | <GREATER_THAN> | <LESS_THAN>
  | <MULTIPLY> | <SUBTRACTION> | <ADDITION_ASSIGN> | <SUBTRACTION_ASSIGN>
  | <INT> | <DIGIT> | <ID> | <PRINT> | <PRINT_LINE>
}

